@model IEnumerable<Sovitushuone.Models.Vaatteet>
    
    @{
        ViewData["Title"] = "Index";
    }

    <head>


        <style>
            .frame {
                width: 700px;
                height: 500px;
                border: 3px solid #ccc;
                background: #eee;
                margin: auto;
                padding: 15px 10px;
            }

            img {
                width: 100%;
                height: 100%;
            }
        </style>
    </head>
    <h1>Vaatteet</h1>

    <body>
        <script src="js/three.js"></script>
        <script src="~/js/OBJLoader.js"></script>
        <script src="~/js/MTLLoader.js"></script>
        <script src="~/js/OrbitControls.js"></script>


        <script>
            const scene = new THREE.Scene();
            const renderer = new THREE.WebGLRenderer({ alpha: true });
            var windowHalfX = 1000 / 2;
            var windowHalfY = 700 / 2;
            renderer.setClearColor(new THREE.Color("hsl(0, 0%, 10%)"));

            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(1000, 700);




            //scene.background = new THREE.Color(0xbbffff);
            const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 5000);
            camera.rotation.y = 45 / 180 * Math.PI;
            camera.position.x = 800;
            camera.position.y = 100;
            camera.position.z = 1000;

            const light = new THREE.AmbientLight(0xffffff, 0.25);

            keyLight = new THREE.DirectionalLight(new THREE.Color('hsl(30, 100%, 75%)'), 0.50);
            keyLight.position.set(-100, 0, 100);

            fillLight = new THREE.DirectionalLight(new THREE.Color('hsl(240, 100%, 75%)'), 0.50);
            fillLight.position.set(100, 0, 100);

            backLight = new THREE.DirectionalLight(0xffffff, 0.50);
            backLight.position.set(100, 0, -100).normalize();

            const loader = new THREE.OBJLoader();




            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
            const renderingParent = new THREE.Group();
            const controls = new THREE.OrbitControls(camera, renderer.domElement);
           
            loader.load(
                // resource URL
                'objects/Tpaita.obj',

                // called when resource is loaded
                function (object) {

                    window.addEventListener('resize', onWindowResize, false);
                    renderingParent.scale.set(0.4, 0.4, 0.4);
                    
                    renderingParent.add(object);
                    object.traverse(object => {
                        if (object.material) {
                            object.material.vertexColors = true;
                            object.position.set(0,200, 10)
                        }
                    });

                    scene.add(renderingParent);




                },


                // called when loading is in progresses
                function (xhr) {

                    console.log((xhr.loaded / xhr.total * 100) + '% loaded');

                },
                // called when loading has errors
                function (error) {

                    console.log('An error happened');

                }
            );
            // load a resource
            loader.load(
                // resource URL
                'objects/mies.obj',

                // called when resource is loaded
                function (object) {

                    window.addEventListener('resize', onWindowResize, false);
                    renderingParent.scale.set(0.3, 0.3, 0.3);
                    renderingParent.add(object);
                    object.traverse(object => {
                        if (object.material) {
                            object.material.vertexColors = true;
                        }
                    });

                    scene.add(renderingParent);

                    scene.add(light);
                    scene.add(keyLight);
                    scene.add(fillLight);
                    scene.add(backLight);


                },


                // called when loading is in progresses
                function (xhr) {

                    console.log((xhr.loaded / xhr.total * 100) + '% loaded');

                },
                // called when loading has errors
                function (error) {

                    console.log('An error happened');

                }
            );

            function animate() {
                requestAnimationFrame(animate);

                renderer.render(scene, camera);
            }

            function onWindowResize() {
                windowHalfX = 1000 / 2;
                windowHalfY = 700 / 2;
                camera.aspect = 1000 / 700;
                camera.updateProjectionMatrix();
                renderer.setSize(1000, 700);
            }

            animate();




        </script>


    </body>